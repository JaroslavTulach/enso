
from Standard.Base import all
import project.Group.Group
import project.Group.Group_Builder

type Suite_Builder
    ## PRIVATE
    Impl builder

    ## Add a group to the builder.
    group : Text -> (Group_Builder -> Any) -> Nothing
    group self (name:Text) fn =
        b = Vector.new_builder
        fn (Group_Builder.Impl b)
        self.builder.append <| Group.Impl name b.to_vector


type Suite
    Impl (groups : Vector Group)

    ## Construct a Suite object
    build : (Suite_Builder -> Any) -> Suite
    build fn =
        IO.println "Running `Suite.build` (collecting tests)..."
        b = Vector.new_builder
        fn (Suite_Builder.Impl b)
        groups_vec = b.to_vector
        IO.println "Done with `Suite.build` (collecting tests)"
        Suite.Impl groups_vec

    ## Merges multiple suites into one suite
    merge : (Vector Suite) -> Suite
    merge suites =
        all_groups = suites.map (_.groups) . flatten
        all_group_names = all_groups.map (_.name)
        if all_group_names.distinct.length != all_group_names.length then Panic.throw "Group names not unique" else
            Suite.Impl all_groups

    run_all self =
        IO.println "Running `Suite.run_all` - running all tests"
        self.groups.each group->
            group.run
        IO.println "Done with `Suite.run_all` - running all tests"
